# 하나의 workflow를 정의하는 파일입니다.
# 해당 workflow의 이름
name: Flutter_GitHub_Actions
# Event를 정의하는 곳입니다.
on:
  # 이번 실습에서는 main 브랜치에 push커맨드를
  # 수행하였을 경우 workflow가 실행되도록 하겠습니다.
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
# job들을 정의하는 영역입니다.
jobs:
  # 하나의 job을 "build"라고 합니다.
  # 이번 실습에서는 하나의 job 만을 사용할
  # 것이기 때문에 하나의 build만 정의될 것입니다.
  build:
    name: Running Test and CI / CD
    # 해당 작업이 실행 될 인스턴스 환경입니다.
    # 이번 실습에서는 ubuntu 를 사용할 것입니다.
    runs-on: ubuntu-latest
    # job의 구성요소인 step들을 정의한 공간입니다.
    steps:
      # 하나의 step은 name 과 uses(혹은 run)으로 구성
      # name은 step의 이름이 정의되어 있고
      # uses 는 미리 만들어진 action을 이용하는 것이고
      # run 은 직접 인스턴스에 커맨드를 실행하는 것입니다.
      # 첫번째 스텝은 action입니다
      # Github repository의 소스를 가져오는 action입니다.
      - name: Checkout source code
        uses: actions/checkout@v4
      
      # 두번째 step은 인스턴스에 Flutter SDK를 설치하는 action 입니다.
      # with 커맨드를 사용하여 SDK의 상세 버전을 설정할 수 있습니다.
      - name: Install Flutter SDK
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: 3.19.6
      - run: flutter --version
      
      # 세번째 step은 해당 레포지토리가 사용하는 패키지를
      #  import하는 단계입니다. 직접 인스턴스에 커맨드를 입력합니다.
      - name: Import Flutter Package
        run: |
          flutter pub get

      - name: Patch for linux build
        run: |
          flutter doctor
          sudo apt-get update -y
          sudo apt-get install -y ninja-build
          sudo apt-get install libgtk-3-dev
          flutter doctor
      
      - name: Build Flutter linux
        run: |
          flutter build linux --release --target=lib/server/main.dart
          cd build/linux/x64/release/bundle
          dir
          zip release.zip .

      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.1 
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }} 

      - name: github release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "build/linux/x64/release/bundle/release.zip"
          tag: ${{ steps.tag_version.outputs.new_tag }}
          name: Release ${{ steps.tag_version.outputs.new_tag }}
          body: ${{ steps.tag_version.outputs.changelog }}
      
